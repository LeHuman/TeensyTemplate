# set(TOOLCHAIN_OFFSET "../TeensyToolchain")
include("${TOOLCHAIN_OFFSET}/tools/toolchain.cmake")
#-DCUSTOM_BUILD_PATH_PREFIX:STRING= #Can be used for some sketchy pre-build Stuff if needed

cmake_minimum_required(VERSION 3.18)

project(Teensy36_Bin)

set(TEENSY_CORE "teensy3")
set(TEENSY_CORE_NAME "MK66FX1M0" CACHE INTERNAL "")
set(TEENSY_CPU "cortex-m4")
set(TEENSY_ARCH "native")
set(TEENSY_CORE_SPEED 180000000)
set(CMAKE_BUILD_TYPE "Release")
# set(CMAKE_BUILD_TYPE "Debug")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

set(LIBRARY_PATH ${CUSTOM_BUILD_PATH_PREFIX}libraries CACHE INTERNAL "")
set(SOURCE_PATH ${CUSTOM_BUILD_PATH_PREFIX}src CACHE INTERNAL "")

add_compile_definitions(USB_SERIAL LAYOUT_US_ENGLISH __${TEENSY_CORE_NAME}__)
add_compile_definitions(_GNU_SOURCE TEENSYDUINO=144 F_CPU=${TEENSY_CORE_SPEED} USING_MAKEFILE)

add_compile_options(-Wall -g -mthumb -ffunction-sections -fdata-sections -nostdlib -MMD) #-O3
add_compile_options(-mcpu=${TEENSY_CPU} -mfloat-abi=hard -mfpu=fpv4-sp-d16) #Make teensy specific
set(LINKER_LIBS "-lm -larm_cortexM4lf_math -lstdc++")
set(LINKER_LIBS "-Wl,--gc-sections, -mthumb -mcpu=${TEENSY_CPU} -mfloat-abi=hard -mfpu=fpv4-sp-d16")
string(APPEND CMAKE_CXX_FLAGS "-std=gnu++14 -felide-constructors -fno-rtti -fno-exceptions")
string(APPEND CMAKE_C_FLAGS "")

set(CORE_PATH "${TOOLCHAIN_ROOT_PATH}/teensy/avr/cores/${TEENSY_CORE}")
string(TOLOWER ${TEENSY_CORE_NAME} TEENSY_CORE_NAME_LOWER)
set(TEENSY_CORE_LD_SCRIPT "${CORE_PATH}/${TEENSY_CORE_NAME_LOWER}.ld")

MACRO(HEADER_DIRECTORIES return_list path_prefix)
    FILE(GLOB_RECURSE new_list ${path_prefix}/*.h | ${path_prefix}/*.hpp)
    SET(dir_list "")
    FOREACH(file_path ${new_list})
        GET_FILENAME_COMPONENT(dir_path ${file_path} PATH)
        SET(dir_list ${dir_list} ${dir_path})
    ENDFOREACH()
    LIST(REMOVE_DUPLICATES dir_list)
    SET(${return_list} ${dir_list})
ENDMACRO()

HEADER_DIRECTORIES(LIBRARY_INCLUDE ${LIBRARY_PATH})
HEADER_DIRECTORIES(CORE_INCLUDE ${CORE_PATH})

file(GLOB_RECURSE L_C_BUILD_FILES ${LIBRARY_PATH}/*.c)
file(GLOB_RECURSE L_CXX_BUILD_FILES ${LIBRARY_PATH}/*.cpp)
file(GLOB_RECURSE S_C_BUILD_FILES ${SOURCE_PATH}/*.c)
file(GLOB_RECURSE S_CXX_BUILD_FILES ${SOURCE_PATH}/*.cpp)
file(GLOB_RECURSE C_C_BUILD_FILES ${CORE_PATH}/*.c)
file(GLOB_RECURSE C_CXX_BUILD_FILES ${CORE_PATH}/*.cpp)

add_library(core ${C_C_BUILD_FILES} ${C_CXX_BUILD_FILES})
target_include_directories(core PUBLIC ${CORE_PATH})
add_library(libraries ${L_C_BUILD_FILES} ${L_CXX_BUILD_FILES})
target_include_directories(libraries PUBLIC ${CORE_PATH} ${LIBRARY_INCLUDE})
target_link_libraries(libraries core)

set(SOURCES ${S_C_BUILD_FILES} ${S_CXX_BUILD_FILES} CACHE INTERNAL "")
add_executable(${PROJECT_NAME} ${SOURCES})

target_include_directories(${PROJECT_NAME} PUBLIC ${CORE_PATH} ${LIBRARY_INCLUDE})
target_link_libraries(${PROJECT_NAME} core libraries)

set(FINAL_LINKER_FLAGS "${LINKER_FLAGS} -T${TEENSY_CORE_LD_SCRIPT} ${LINKER_LIBS}")
set_target_properties(${PROJECT_NAME} PROPERTIES LINK_DEPENDS ${TEENSY_CORE_LD_SCRIPT})
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${FINAL_LINKER_FLAGS}")

set_target_properties(${PROJECT_NAME} PROPERTIES
	OUTPUT_NAME ${PROJECT_NAME}
	SUFFIX ".elf"
)
set(FINAL_OUTPUT_FILE "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${PROJECT_NAME}.hex" CACHE INTERNAL "")
set(TARGET_ELF "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${PROJECT_NAME}.elf")
add_custom_command(TARGET ${PROJECT_NAME}
    POST_BUILD
    COMMAND echo.
    COMMAND cd ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} && ${CMAKE_SIZE_UTIL} "${PROJECT_NAME}.elf"
    COMMAND ${CMAKE_OBJCOPY} -O ihex -R .eeprom ${TARGET_ELF} ${FINAL_OUTPUT_FILE})
set_property(DIRECTORY APPEND PROPERTY ADDITIONAL_CLEAN_FILES
    "${FINAL_OUTPUT_FILE}"
)